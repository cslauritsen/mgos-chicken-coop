import org.joda.time.DateTime

rule "Update TestBoard ON Counter"
when
    Item TestBoard_OnCount received update
then
	var Double newval = 0.0
	if ( (TestBoard_Usage.state !== null )
		&& (TestBoard_Usage.state.toString != 'NULL')
	) {
		newval = Double.parseDouble(TestBoard_Usage.state.toString)
	}

	var Double count = Double.parseDouble(TestBoard_OnCount.state.toString)
	logInfo("rules", "UpdateCounters: increase TestBoard_Usage by " + count.toString + " seconds")

	// convert count from seconds to minutes before adding
	newval = newval + (count / 60)
	TestBoard_Usage.postUpdate(newval)
end

rule "Check Stale Reported Data"
when
	Time cron "10 0/5 * * * ?"  // every 10th second of each 5th minute
then
	//logInfo("rules", "Cron Jobs run, ts=" + now.millis )
	var DateTime min10ago = now.minusMinutes(10)

	if ((new DateTime(TestBoard_Uptime.lastUpdate)) > min10ago ) {
		TestBoard_Health.postUpdate("ON")
	} else {
		logInfo("rules", "TestBoard update delayed")
		TestBoard_Health.postUpdate("OFF")
	}
end

rule "Reset Daily Usage"
when
	Time cron "10 0 0 * * ?"  // 00:00:10
then
	var Double current_val
	logInfo("rules", "update TestBoard_Usage to rrd before reset")
	current_val = Double.parseDouble(TestBoard_Usage.state.toString)
	TestBoard_Usage.postUpdate(current_val.intValue())
	TestBoard_Usage.persist("rrd4j")
	logInfo("rules", "Reset TestBoard_Usage Counter")
	TestBoard_Usage.postUpdate(0);
end
